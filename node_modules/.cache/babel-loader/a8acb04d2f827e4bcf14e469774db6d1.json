{"ast":null,"code":"var _jsxFileName = \"/Users/gg/Documents/portfolio/proj-react/src/components/Card/Card.js\";\nimport React, { Component } from 'react';\nimport Task from '../UI/Task/Task';\nimport AddTask from '../UI/AddTask/AddTask';\nimport './Card.scss';\nimport CardTitle from './CardTitle/CardTitle';\nimport Axios from '../../axios/axios-folders';\nimport DeleteCard from '../UI/DeleteCard/DeleteCard';\nexport default class Card extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      tasks: []\n    };\n\n    this.addTask = async text => {\n      const newTask = this.createTask(text);\n      const activeFolderKey = this.props.activeFolderKey;\n      const cardKey = this.props.keyx;\n      await Axios.post(`/folders/${activeFolderKey}/cards/${cardKey}/tasks.json`, newTask).then(function (res) {\n        const taskKey = Object.values(res.data)[0];\n        newTask.key = taskKey;\n        Axios.patch(`/folders/${activeFolderKey}/cards/${cardKey}/tasks/${taskKey}.json`, {\n          'key': taskKey\n        });\n      });\n      this.setState(({\n        tasks\n      }) => {\n        const newArr = [...tasks, newTask];\n        return {\n          tasks: newArr\n        };\n      });\n    };\n\n    this.deleteTask = (name, key) => {\n      console.log(name);\n      const idx = this.state.tasks.findIndex(el => el.name === name);\n      const activeFolderKey = this.props.activeFolderKey;\n      const cardKey = this.props.keyx;\n      Axios.delete(`/folders/${activeFolderKey}/cards/${cardKey}/tasks/${key}.json`);\n      this.setState(({\n        tasks\n      }) => {\n        const newArr = [...tasks.slice(0, idx), ...tasks.slice(idx + 1)];\n        return {\n          tasks: newArr\n        };\n      });\n    };\n\n    this.onToggleImportant = (name, key) => {\n      const idx = this.state.tasks.findIndex(el => el.name === name);\n      const oldItem = this.state.tasks[idx];\n      const newItem = { ...oldItem,\n        ['important']: !oldItem['important']\n      };\n      const activeFolderKey = this.props.activeFolderKey;\n      const cardKey = this.props.keyx;\n      const taskKey = key;\n      Axios.patch(`/folders/${activeFolderKey}/cards/${cardKey}/tasks/${taskKey}.json`, {\n        'important': newItem.important\n      });\n      this.setState(({\n        tasks\n      }) => {\n        return {\n          tasks: this.toggleProperty(tasks, name, 'important')\n        };\n      });\n    };\n\n    this.onComplete = (name, key) => {\n      const idx = this.state.tasks.findIndex(el => el.name === name);\n      const oldItem = this.state.tasks[idx];\n      const newItem = { ...oldItem,\n        ['done']: !oldItem['done']\n      };\n      const activeFolderKey = this.props.activeFolderKey;\n      const cardKey = this.props.keyx;\n      const taskKey = key;\n      Axios.patch(`/folders/${activeFolderKey}/cards/${cardKey}/tasks/${taskKey}.json`, {\n        'done': newItem.done\n      });\n      this.setState(({\n        tasks\n      }) => {\n        return {\n          tasks: this.toggleProperty(tasks, name, 'done')\n        };\n      });\n    };\n  }\n\n  createTask(name) {\n    return {\n      name,\n      important: false,\n      done: false,\n      key: ''\n    };\n  }\n\n  toggleProperty(arr, name, propName) {\n    const idx = arr.findIndex(el => el.name === name);\n    const oldItem = arr[idx];\n    const newItem = { ...oldItem,\n      [propName]: !oldItem[propName]\n    };\n    return [...arr.slice(0, idx), newItem, ...arr.slice(idx + 1)];\n  }\n\n  async componentDidMount() {\n    try {\n      const cardKey = this.props.keyx;\n      const activeFolderKey = this.props.activeFolderKey;\n      const responseTasks = await Axios.get(`/folders/${activeFolderKey}/cards/${cardKey}/tasks.json`);\n      const tasks = [];\n      Object.values(responseTasks.data).forEach(task => {\n        tasks.push(task);\n      });\n      this.setState({\n        tasks\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"TaskElement\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(CardTitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }\n    }), this.state.tasks.map(task => {\n      return /*#__PURE__*/React.createElement(Task, {\n        name: task.name,\n        important: task.important,\n        done: task.done,\n        key: task.key,\n        keyx: task.key,\n        onToggleImportant: this.onToggleImportant,\n        onDeleted: this.deleteTask,\n        onComplete: this.onComplete,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 21\n        }\n      });\n    }), /*#__PURE__*/React.createElement(AddTask, {\n      text: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u043D\\u043E\\u0432\\u0443\\u044E \\u0437\\u0430\\u0434\\u0430\\u0447\\u0443\",\n      onItemAdded: this.addTask,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(DeleteCard, {\n      deleteCard: this.props.onDeleteCard,\n      cardKey: this.props.id,\n      keyx: this.props.keyx,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/gg/Documents/portfolio/proj-react/src/components/Card/Card.js"],"names":["React","Component","Task","AddTask","CardTitle","Axios","DeleteCard","Card","state","tasks","addTask","text","newTask","createTask","activeFolderKey","props","cardKey","keyx","post","then","res","taskKey","Object","values","data","key","patch","setState","newArr","deleteTask","name","console","log","idx","findIndex","el","delete","slice","onToggleImportant","oldItem","newItem","important","toggleProperty","onComplete","done","arr","propName","componentDidMount","responseTasks","get","forEach","task","push","e","render","map","onDeleteCard","id"],"mappings":"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","sourcesContent":["import React, {Component} from 'react'\nimport Task from '../UI/Task/Task'\nimport AddTask from '../UI/AddTask/AddTask'\nimport './Card.scss'\nimport CardTitle from './CardTitle/CardTitle';\nimport Axios from '../../axios/axios-folders';\nimport DeleteCard from '../UI/DeleteCard/DeleteCard';\n\nexport default class Card extends Component {\n  state = {\n    tasks: []\n  }\n\n  createTask(name) {\n    return {\n        name,\n        important: false,\n        done: false,\n        key: ''\n    }\n  }\n\n  addTask = async (text) => {\n    const newTask = this.createTask(text);\n    const activeFolderKey = this.props.activeFolderKey\n    const cardKey = this.props.keyx\n    await Axios.post(`/folders/${activeFolderKey}/cards/${cardKey}/tasks.json`, newTask)\n    .then(function (res) {\n      const taskKey = ((Object.values(res.data))[0])\n      newTask.key = taskKey\n      Axios.patch(`/folders/${activeFolderKey}/cards/${cardKey}/tasks/${taskKey}.json`, {'key': taskKey})\n    })\n    this.setState(({ tasks }) => {\n      const newArr = [\n        ...tasks,\n        newTask\n      ];\n      return {\n        tasks: newArr\n      }\n    })\n  }\n\n  deleteTask = (name, key) => {\n    console.log(name,)\n    const idx = this.state.tasks.findIndex((el) => el.name === name)\n    const activeFolderKey = this.props.activeFolderKey\n    const cardKey = this.props.keyx\n    Axios.delete(`/folders/${activeFolderKey}/cards/${cardKey}/tasks/${key}.json`)\n    this.setState(({ tasks }) => {\n      const newArr = [\n        ...tasks.slice(0, idx),\n        ...tasks.slice(idx + 1)\n      ]\n      return {\n        tasks: newArr\n      }\n    })\n  }\n\n  toggleProperty(arr, name, propName) {\n    const idx = arr.findIndex((el) => el.name === name);\n\n    const oldItem = arr[idx];\n    const newItem = {...oldItem,\n      [propName]: !oldItem[propName]}\n\n    return [\n      ...arr.slice(0, idx),\n      newItem,\n      ...arr.slice(idx + 1)\n    ]\n  }\n\n  onToggleImportant = (name, key) => {\n    const idx = this.state.tasks.findIndex((el) => el.name === name);\n    const oldItem = this.state.tasks[idx];\n    const newItem = {...oldItem,\n      ['important']: !oldItem['important']\n    }\n    const activeFolderKey = this.props.activeFolderKey\n    const cardKey = this.props.keyx\n    const taskKey = key\n    Axios.patch(`/folders/${activeFolderKey}/cards/${cardKey}/tasks/${taskKey}.json`, {'important': newItem.important})\n    this.setState(({ tasks }) => {\n      return {\n        tasks: this.toggleProperty(tasks, name, 'important')\n      }\n    })\n  }\n\n  onComplete = (name, key) => {\n    const idx = this.state.tasks.findIndex((el) => el.name === name);\n    const oldItem = this.state.tasks[idx];\n    const newItem = {...oldItem,\n      ['done']: !oldItem['done']\n    }\n    const activeFolderKey = this.props.activeFolderKey\n    const cardKey = this.props.keyx\n    const taskKey = key\n    Axios.patch(`/folders/${activeFolderKey}/cards/${cardKey}/tasks/${taskKey}.json`, {'done': newItem.done})\n    this.setState(({ tasks }) => {\n      return {\n        tasks: this.toggleProperty(tasks, name, 'done')\n      }\n    })\n  }\n\n  async componentDidMount() {\n    try {  \n      const cardKey = this.props.keyx\n      const activeFolderKey = this.props.activeFolderKey\n      const responseTasks = await Axios.get(`/folders/${activeFolderKey}/cards/${cardKey}/tasks.json`)\n      const tasks = []\n      Object.values(responseTasks.data).forEach((task) => {\n        tasks.push(task)\n      })  \n\n      this.setState({\n        tasks\n      }) \n\n    } catch (e) {\n      console.log(e)\n    }\n  }  \n\n    render() {\n        return (\n            <div className='TaskElement'>\n                <CardTitle />\n                {this.state.tasks.map((task) => {\n                  return( \n                    <Task\n                      name={task.name}\n                      important={task.important}\n                      done={task.done}\n                      key={task.key}\n                      keyx={task.key}\n                      onToggleImportant={this.onToggleImportant}\n                      onDeleted={ this.deleteTask }\n                      onComplete={this.onComplete}\n                    />   \n                  )                 \n                })}\n                <AddTask text='Добавить новую задачу' onItemAdded={this.addTask} />\n                <DeleteCard \n                  deleteCard={this.props.onDeleteCard}\n                  cardKey={this.props.id}  \n                  keyx={this.props.keyx}\n                />\n            </div>\n        )\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}