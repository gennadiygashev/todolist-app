{"ast":null,"code":"var _jsxFileName = \"/Users/gg/Documents/portfolio/proj-react/src/containers/Main/Main.js\";\n// Контейнер для отображения элементов карточек с задачами\nimport React, { useState, useEffect } from 'react';\nimport Card from '../../components/Card/Card';\nimport AddCard from '../../components/UI/AddCard/AddCard';\nimport Axios from '../../axios/axios-folders';\nimport Box from '@material-ui/core/Box';\nexport default function Main(props) {\n  const [data, setData] = useState({\n    currentCards: []\n  });\n\n  const createCard = () => {\n    return {\n      title: 'Hello World'\n    };\n  };\n\n  const changeTitle = (value, key) => {\n    const idx = data.folders.findIndex(el => el.key === key);\n    const oldItem = data.folders[idx];\n    const newItem = { ...oldItem,\n      ['title']: value\n    };\n    setData(({\n      currentCards\n    }) => {\n      const newArr = [...currentCards.slice(0, idx), newItem, ...currentCards.slice(idx + 1)];\n      return {\n        currentCards: newArr\n      };\n    });\n    Axios.patch(`/folders/${activeFolder}/cards/${key}.json`, {\n      'title': cardKey\n    });\n  };\n\n  const addCard = async () => {\n    const activeFolder = props.folderID;\n    const newCard = createCard();\n    await Axios.post(`/folders/${activeFolder}/cards.json`, newCard).then(function (res) {\n      const cardKey = Object.values(res.data)[0];\n      newCard.key = cardKey;\n      Axios.patch(`/folders/${activeFolder}/cards/${cardKey}.json`, {\n        'key': cardKey\n      });\n    });\n    setData(({\n      currentCards\n    }) => {\n      const newArr = [...currentCards, newCard];\n      return {\n        currentCards: newArr\n      };\n    });\n  };\n\n  const onDeleteCard = cardID => {\n    const idx = data.currentCards.findIndex(el => el.key === cardID);\n    const activeFolderKey = props.folderID;\n    Axios.delete(`/folders/${activeFolderKey}/cards/${cardID}.json`);\n    setData(({\n      currentCards\n    }) => {\n      const newArr = [...currentCards.slice(0, idx), ...currentCards.slice(idx + 1)];\n      return {\n        currentCards: newArr\n      };\n    });\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const activeFolder = props.folderID;\n        const responseCards = await Axios.get(`/folders/${activeFolder}/cards.json`);\n        const currentCards = [];\n        Object.values(responseCards.data).forEach(card => {\n          currentCards.push(card);\n        });\n        setData({\n          currentCards\n        });\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    fetchData();\n  }, []);\n  return /*#__PURE__*/React.createElement(Box, {\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"nowrap\",\n    overflow: \"scroll\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, data.currentCards.map(card => {\n    return /*#__PURE__*/React.createElement(Box, {\n      p: 1,\n      minWidth: \"25%\",\n      maxWidth: \"25%\",\n      minHeight: \"85vh\",\n      borderRight: 1,\n      borderColor: \"paper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      key: card.key,\n      cardID: card.key,\n      activeFolderKey: props.folderID,\n      title: card.title,\n      onDeleteCard: onDeleteCard,\n      changeTitle: changeTitle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    }));\n  }), /*#__PURE__*/React.createElement(Box, {\n    minWidth: \"25%\",\n    maxWidth: \"25%\",\n    minHeight: \"85vh\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AddCard, {\n    addCard: addCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/gg/Documents/portfolio/proj-react/src/containers/Main/Main.js"],"names":["React","useState","useEffect","Card","AddCard","Axios","Box","Main","props","data","setData","currentCards","createCard","title","changeTitle","value","key","idx","folders","findIndex","el","oldItem","newItem","newArr","slice","patch","activeFolder","cardKey","addCard","folderID","newCard","post","then","res","Object","values","onDeleteCard","cardID","activeFolderKey","delete","fetchData","responseCards","get","forEach","card","push","e","console","log","map"],"mappings":"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","sourcesContent":["// Контейнер для отображения элементов карточек с задачами\nimport React, { useState, useEffect } from 'react'\nimport Card from '../../components/Card/Card'\nimport AddCard from '../../components/UI/AddCard/AddCard'\nimport Axios from '../../axios/axios-folders'\nimport Box from '@material-ui/core/Box';\n\nexport default function Main(props) {\n\n  const [data, setData] = useState({ currentCards: [] })\n  \n  const createCard = () => {\n    return {\n      title: 'Hello World'\n    }\n  }\n\n  const changeTitle = (value, key) => {\n    const idx = data.folders.findIndex((el) => el.key === key);\n    const oldItem = data.folders[idx];\n    const newItem = {...oldItem,\n      ['title']: value\n    }\n    setData(({ currentCards }) => {\n      const newArr = [\n        ...currentCards.slice(0, idx),\n        newItem,\n        ...currentCards.slice(idx + 1)\n      ]  \n      return {\n        currentCards: newArr\n      }      \n    })\n    Axios.patch(`/folders/${activeFolder}/cards/${key}.json`, {'title': cardKey})\n  }\n\n  const addCard = async () => {\n    const activeFolder = props.folderID\n    const newCard = createCard();\n    await Axios.post(`/folders/${activeFolder}/cards.json`, newCard)\n    .then(function (res) {\n      const cardKey = ((Object.values(res.data))[0])\n      newCard.key = cardKey\n      Axios.patch(`/folders/${activeFolder}/cards/${cardKey}.json`, {'key': cardKey})\n    })\n    setData(({ currentCards }) => {\n      const newArr = [\n        ...currentCards,\n        newCard\n      ];\n      return {\n        currentCards: newArr\n      }\n    })  \n  }\n\n  const onDeleteCard = (cardID) => {\n    const idx = data.currentCards.findIndex((el) => el.key === cardID)\n    const activeFolderKey = props.folderID\n    Axios.delete(`/folders/${activeFolderKey}/cards/${cardID}.json`)\n    setData(({ currentCards }) => {\n      const newArr = [\n        ...currentCards.slice(0, idx),\n        ...currentCards.slice(idx + 1)\n      ]\n      return {\n        currentCards: newArr\n      }\n    })\n  }\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {  \n        const activeFolder = props.folderID   \n        const responseCards = await Axios.get(`/folders/${activeFolder}/cards.json`)\n        const currentCards = []\n        Object.values(responseCards.data).forEach((card) => {\n          currentCards.push(card)\n        })  \n        setData({\n          currentCards\n        }) \n      } catch (e) {\n        console.log(e)\n      }\n    }\n    fetchData()\n  }, [])\n\n  return (\n    <Box display=\"flex\" flexDirection=\"row\" flexWrap=\"nowrap\" overflow='scroll'>\n      {data.currentCards.map((card) => {\n        return(\n          <Box p={1} minWidth='25%' maxWidth='25%' minHeight='85vh' borderRight={1} borderColor=\"paper\" >\n            <Card \n              key={card.key} \n              cardID={card.key}\n              activeFolderKey={props.folderID}\n              title={card.title}\n              onDeleteCard={onDeleteCard}\n              changeTitle={changeTitle}\n            />\n          </Box>\n        )\n      })}\n      <Box minWidth='25%' maxWidth='25%' minHeight='85vh'>\n        <AddCard addCard={addCard} />\n      </Box>\n    </Box>\n  )\n}\n\n"]},"metadata":{},"sourceType":"module"}