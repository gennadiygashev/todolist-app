{"ast":null,"code":"var _jsxFileName = \"/Users/gg/Documents/portfolio/proj-react/src/components/Card/Card.js\";\nimport React, { useState, useEffect } from 'react';\nimport Task from '../UI/Task/Task';\nimport AddTask from '../UI/AddTask/AddTask';\nimport CardTitle from './CardTitle/CardTitle';\nimport Axios from '../../axios/axios-folders';\nimport DeleteCard from '../UI/DeleteCard/DeleteCard';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Card from '@material-ui/core/Card';\nexport default function CardT(props) {\n  const [data, setData] = useState({\n    tasks: []\n  });\n  const [loading, setLoading] = useState(true);\n  const [emptyCard, setEmptyCard] = useState({\n    tasks: [{\n      name: 'Скорее',\n      important: false,\n      done: false,\n      key: ''\n    }]\n  });\n\n  const createTask = name => {\n    return {\n      name,\n      important: false,\n      done: false,\n      key: ''\n    };\n  };\n\n  const addTask = async text => {\n    const newTask = createTask(text);\n    const activeFolderKey = props.activeFolderKey;\n    const cardKey = props.cardID;\n    await Axios.post(`/folders/${activeFolderKey}/cards/${cardKey}/tasks.json`, newTask).then(function (res) {\n      const taskKey = Object.values(res.data)[0];\n      newTask.key = taskKey;\n      Axios.patch(`/folders/${activeFolderKey}/cards/${cardKey}/tasks/${taskKey}.json`, {\n        'key': taskKey\n      });\n    });\n    setData(({\n      tasks\n    }) => {\n      const newArr = [...tasks, newTask];\n      return {\n        tasks: newArr\n      };\n    });\n  };\n\n  const deleteTask = taskID => {\n    console.log(taskID);\n    console.log(data.tasks);\n    const idx = data.tasks.findIndex(el => el.key === taskID);\n    console.log(idx);\n    const activeFolderKey = props.activeFolderKey;\n    const cardKey = props.cardID;\n    Axios.delete(`/folders/${activeFolderKey}/cards/${cardKey}/tasks/${taskID}.json`);\n    setData(({\n      tasks\n    }) => {\n      const newArr = [...tasks.slice(0, idx), ...tasks.slice(idx + 1)];\n      console.log(newArr);\n      return {\n        tasks: newArr\n      };\n    });\n  };\n\n  const toggleProperty = (arr, taskID, propName) => {\n    const idx = arr.findIndex(el => el.key === taskID);\n    const oldItem = arr[idx];\n    const newItem = { ...oldItem,\n      [propName]: !oldItem[propName]\n    };\n    return [...arr.slice(0, idx), newItem, ...arr.slice(idx + 1)];\n  };\n\n  const onToggleImportant = taskID => {\n    const idx = data.tasks.findIndex(el => el.key === taskID);\n    const oldItem = data.tasks[idx];\n    const newItem = { ...oldItem,\n      ['important']: !oldItem['important']\n    };\n    const activeFolderKey = props.activeFolderKey;\n    const cardKey = props.cardID;\n    const taskKey = taskID;\n    Axios.patch(`/folders/${activeFolderKey}/cards/${cardKey}/tasks/${taskKey}.json`, {\n      'important': newItem.important\n    });\n    setData(({\n      tasks\n    }) => {\n      return {\n        tasks: toggleProperty(tasks, taskID, 'important')\n      };\n    });\n  };\n\n  const onComplete = taskID => {\n    const idx = data.tasks.findIndex(el => el.key === taskID);\n    const oldItem = data.tasks[idx];\n    const newItem = { ...oldItem,\n      ['done']: !oldItem['done']\n    };\n    const activeFolderKey = props.activeFolderKey;\n    const cardKey = props.cardID;\n    const taskKey = taskID;\n    Axios.patch(`/folders/${activeFolderKey}/cards/${cardKey}/tasks/${taskKey}.json`, {\n      'done': newItem.done\n    });\n    setData(({\n      tasks\n    }) => {\n      return {\n        tasks: toggleProperty(tasks, taskID, 'done')\n      };\n    });\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const cardKey = props.cardID;\n        const activeFolderKey = props.activeFolderKey;\n        const responseTasks = await Axios.get(`/folders/${activeFolderKey}/cards/${cardKey}/tasks.json`);\n        const tasks = [];\n        Object.values(responseTasks.data).forEach(task => {\n          tasks.push(task);\n        });\n        setData({\n          tasks\n        });\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    const renderData = async () => {\n      await fetchData();\n      setLoading(false);\n    };\n\n    renderData();\n  }, []);\n  return /*#__PURE__*/React.createElement(Card, {\n    style: {\n      minHeight: '83vh',\n      height: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    title: /*#__PURE__*/React.createElement(CardTitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 16\n      }\n    }),\n    action: /*#__PURE__*/React.createElement(DeleteCard, {\n      deleteCard: props.onDeleteCard,\n      cardID: props.cardID,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }\n  }, loading ? /*#__PURE__*/React.createElement(CircularProgress, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 20\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null, data.tasks.length === 0 ? emptyCard.tasks.map(task => {\n    return /*#__PURE__*/React.createElement(Task, {\n      name: task.name,\n      important: task.important,\n      done: task.done,\n      key: task.key,\n      taskID: task.key,\n      onToggleImportant: onToggleImportant,\n      onDeleted: deleteTask,\n      onComplete: onComplete,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }\n    });\n  }) : data.tasks.map(task => {\n    return /*#__PURE__*/React.createElement(Task, {\n      name: task.name,\n      important: task.important,\n      done: task.done,\n      key: task.key,\n      taskID: task.key,\n      onToggleImportant: onToggleImportant,\n      onDeleted: deleteTask,\n      onComplete: onComplete,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }\n    });\n  })), /*#__PURE__*/React.createElement(AddTask, {\n    text: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0437\\u0430\\u0434\\u0430\\u0447\\u0443\",\n    onItemAdded: addTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/gg/Documents/portfolio/proj-react/src/components/Card/Card.js"],"names":["React","useState","useEffect","Task","AddTask","CardTitle","Axios","DeleteCard","CardHeader","CardContent","CircularProgress","Card","CardT","props","data","setData","tasks","loading","setLoading","emptyCard","setEmptyCard","name","important","done","key","createTask","addTask","text","newTask","activeFolderKey","cardKey","cardID","post","then","res","taskKey","Object","values","patch","newArr","deleteTask","taskID","console","log","idx","findIndex","el","delete","slice","toggleProperty","arr","propName","oldItem","newItem","onToggleImportant","onComplete","fetchData","responseTasks","get","forEach","task","push","e","renderData","minHeight","height","onDeleteCard","length","map"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Task from '../UI/Task/Task'\nimport AddTask from '../UI/AddTask/AddTask'\nimport CardTitle from './CardTitle/CardTitle';\nimport Axios from '../../axios/axios-folders';\nimport DeleteCard from '../UI/DeleteCard/DeleteCard';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Card from '@material-ui/core/Card';\n\n\nexport default function CardT(props) {\n\n  const [data, setData] = useState({ tasks: [] })\n  const [loading, setLoading] = useState(true)\n  const [emptyCard, setEmptyCard] = useState({ tasks: [{\n    name: 'Скорее',\n    important: false,\n    done: false,\n    key: ''\n  }] })\n\n  const createTask = (name) => {\n    return {\n      name,\n      important: false,\n      done: false,\n      key: ''\n    }\n  }\n\n  const addTask = async (text) => {\n    const newTask = createTask(text);\n    const activeFolderKey = props.activeFolderKey\n    const cardKey = props.cardID\n    await Axios.post(`/folders/${activeFolderKey}/cards/${cardKey}/tasks.json`, newTask)\n    .then(function (res) {\n      const taskKey = ((Object.values(res.data))[0])\n      newTask.key = taskKey\n      Axios.patch(`/folders/${activeFolderKey}/cards/${cardKey}/tasks/${taskKey}.json`, {'key': taskKey})\n    })\n    setData(({ tasks }) => {\n      const newArr = [\n        ...tasks,\n        newTask\n      ];\n      return {\n        tasks: newArr\n      }\n    })\n  }\n\n  const deleteTask = (taskID) => {\n    console.log(taskID)\n    console.log(data.tasks)\n    const idx = data.tasks.findIndex((el) => el.key === taskID)\n    console.log(idx)\n    const activeFolderKey = props.activeFolderKey\n    const cardKey = props.cardID\n    Axios.delete(`/folders/${activeFolderKey}/cards/${cardKey}/tasks/${taskID}.json`)\n    setData(({ tasks }) => {\n      const newArr = [\n        ...tasks.slice(0, idx),\n        ...tasks.slice(idx + 1)\n      ]\n      console.log(newArr)\n      return {\n        tasks: newArr\n      }\n    })\n  }\n\n  const toggleProperty = (arr, taskID, propName) => {\n    const idx = arr.findIndex((el) => el.key === taskID);\n\n    const oldItem = arr[idx];\n    const newItem = {...oldItem,\n      [propName]: !oldItem[propName]}\n\n    return [\n      ...arr.slice(0, idx),\n      newItem,\n      ...arr.slice(idx + 1)\n    ]\n  }\n\n  const onToggleImportant = (taskID) => {\n    const idx = data.tasks.findIndex((el) => el.key === taskID);\n    const oldItem = data.tasks[idx];\n    const newItem = {...oldItem,\n      ['important']: !oldItem['important']\n    }\n    const activeFolderKey = props.activeFolderKey\n    const cardKey = props.cardID\n    const taskKey = taskID\n    Axios.patch(`/folders/${activeFolderKey}/cards/${cardKey}/tasks/${taskKey}.json`, {'important': newItem.important})\n    setData(({ tasks }) => {\n      return {\n        tasks: toggleProperty(tasks, taskID, 'important')\n      }\n    })\n  }\n\n  const onComplete = (taskID) => {\n    const idx = data.tasks.findIndex((el) => el.key === taskID);\n    const oldItem = data.tasks[idx];\n    const newItem = {...oldItem,\n      ['done']: !oldItem['done']\n    }\n    const activeFolderKey = props.activeFolderKey\n    const cardKey = props.cardID\n    const taskKey = taskID\n    Axios.patch(`/folders/${activeFolderKey}/cards/${cardKey}/tasks/${taskKey}.json`, {'done': newItem.done})\n    setData(({ tasks }) => {\n      return {\n        tasks: toggleProperty(tasks, taskID, 'done')\n      }\n    })\n  }\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {  \n        const cardKey = props.cardID\n        const activeFolderKey = props.activeFolderKey\n        const responseTasks = await Axios.get(`/folders/${activeFolderKey}/cards/${cardKey}/tasks.json`)\n        const tasks = []\n        Object.values(responseTasks.data).forEach((task) => {\n          tasks.push(task)\n        })  \n        setData({\n          tasks\n        }) \n      } catch (e) {\n        console.log(e)\n      }  \n    }\n    const renderData = async () => {\n      await fetchData()\n      setLoading(false)  \n    }\n    renderData()\n  }, [])\n\n  return (\n    <Card style={{ minHeight: '83vh', height: '100%' }}>\n      <CardHeader\n        title={<CardTitle />}\n        action={\n          <DeleteCard \n            deleteCard={props.onDeleteCard}\n            cardID={props.cardID}\n          />\n        }\n      />\n      <CardContent>\n        {loading ? <CircularProgress /> :\n          <>\n            {data.tasks.length === 0 ? \n            emptyCard.tasks.map((task) => {\n              return( \n                <Task\n                  name={task.name}\n                  important={task.important}\n                  done={task.done}\n                  key={task.key}\n                  taskID={task.key}\n                  onToggleImportant={onToggleImportant}\n                  onDeleted={deleteTask}\n                  onComplete={onComplete}\n                />   \n              )                 \n            }) : \n            data.tasks.map((task) => {\n              return( \n                <Task\n                  name={task.name}\n                  important={task.important}\n                  done={task.done}\n                  key={task.key}\n                  taskID={task.key}\n                  onToggleImportant={onToggleImportant}\n                  onDeleted={deleteTask}\n                  onComplete={onComplete}\n                />   \n              )                 \n            })  \n            }\n          </>        \n        }\n        <AddTask text='Добавить задачу' onItemAdded={addTask} />\n      </CardContent>\n    </Card> \n  )\n}\n\n"]},"metadata":{},"sourceType":"module"}